{
  "info": {
    "name": "JSONPlaceholder - API Learning",
    "_postman_id": "11111111-2222-3333-4444-555555555555",
    "description": "Practice collection against JSONPlaceholder with basic tests.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Get posts",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/posts",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "posts"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
              "const body = pm.response.json();",
              "pm.test('Body is an array with items', function () { pm.expect(body).to.be.an('array'); pm.expect(body.length).to.be.above(0); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get single post (id=1)",
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "url": {
          "raw": "{{base_url}}/posts/1",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
              "const body = pm.response.json();",
              "pm.test('Has id=1', function () { pm.expect(body.id).to.eql(1); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Create post (mocked)",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"title\":\"foo\",\"body\":\"bar\",\"userId\":1}"
        },
        "url": {
          "raw": "{{base_url}}/posts",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "posts"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 201', function () { pm.response.to.have.status(201); });",
              "const body = pm.response.json();",
              "pm.test('Has id in response (mocked)', function () { pm.expect(body).to.have.property('id'); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Update post (id=1)",
      "request": {
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\"id\":1,\"title\":\"updated\",\"body\":\"content\",\"userId\":1}"
        },
        "url": {
          "raw": "{{base_url}}/posts/1",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
              "pm.test('Echoes updated title', function () { pm.expect(pm.response.json().title).to.eql('updated'); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Delete post (id=1)",
      "request": {
        "method": "DELETE",
        "url": {
          "raw": "{{base_url}}/posts/1",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "posts",
            "1"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 200', function () { pm.response.to.have.status(200); });",
              "pm.test('Empty object on delete', function () { pm.expect(pm.response.json()).to.deep.equal({}); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Invalid route (404)",
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{base_url}}/this-route-should-not-exist-404",
          "host": [
            "{{base_url}}"
          ],
          "path": [
            "this-route-should-not-exist-404"
          ]
        }
      },
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status is 404', function () { pm.response.to.have.status(404); });"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ]
}